pairs(have_rel[c("siips", largest_p_values)], pch = 20)
m2 = lm(neuromaps_siips$cpdm ~ zed)
summary(m2)
plot(m2)
# functions
scale_zero_to_one <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
plot_hist_by_col <- function(df) {
for (i in seq_len(ncol(df))) {
hist(df[, i], main = colnames(df[i]), xlab = colnames(df[i]))
}
}
# column 1 is the response (y), and the rest are predictors (Xs)
df <- read.csv("data/neuromaps-mni152_y-cpdm_res-basc444.csv")
# functions
scale_zero_to_one <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
plot_hist_by_col <- function(df) {
for (i in seq_len(ncol(df))) {
hist(df[, i], main = colnames(df[i]), xlab = colnames(df[i]))
}
}
# column 1 is the response (y), and the rest are predictors (Xs)
df <- read.csv("/Users/kevinnguyen/Desktop/fmph221/data/neuromaps-mni152_y-cpdm_res-basc444.csv")
df <- apply(df, 2, scale_zero_to_one) |> as.data.frame()
# log transformation of skewed variables
logcols <- c( # choosen by visual inspection of histograms
"aghourian2017",
"bedard2019",
"gallezot2017",
"jaworska2020",
"sandiego2015",
"sasaki2012",
"tuominen"
)
df[logcols] <- log(df[logcols] + 1)
# select predictors that have some marginal relationship with the response
cor_w_y <- cor(df[, -1], df$cpdm)
subset <- colnames(df[, -1])[abs(cor_w_y) > 0.1]
df_subset <- df[, c("cpdm", subset)]
print(paste0("dropped ", ncol(df) - ncol(df_subset), " columns"))
# histogram for each column of subset
plot_hist_by_col(df_subset)
### model 1 ###
m1 <- lm(cpdm ~ ., data = df_subset)
summary(m1)$coefficients |> round(3)
summary(m1)$r.squared
# pairwise plots for predictors with largest t-statistics
tvals <- summary(m1)$coefficients[, 3]
largest_tvals <- tvals[order(abs(tvals), decreasing = TRUE)][2:5] |> names()
pairs(df_subset[c("cpdm", largest_tvals)], pch = 20)
# residual plot: shows data not iid
plot(m1)
### model 2: PCA to reduce collinearity btw predictors ###
df_subset_pc <- prcomp(df_subset[, -1])
summary(df_subset_pc)
# select PCs with proportion of variance >= 0.05
xs <- as.matrix(df_subset[, -1]) %*% df_subset_pc$rotation[, 1:4]
pairs(data.frame(cpdm = df_subset$cpdm, xs), pch = 20)
m2 <- lm(df$cpdm ~ xs)
summary(m2)$coefficients |> round(3)
summary(m2)$r.squared
plot(m2)
## column 1 is the response, and the rest are predictors
neuromaps_siips = read.csv("/Users/kevinnguyen/Desktop/fmph221/data/neuromaps-mni152_y-cpdm_res-basc444.csv")
neuromaps_siips <- apply(neuromaps_siips, 2, scale_zero_to_one) |> as.data.frame()
# function to create histograms for each column in a dataframe
plot_histogram = function(dataframe){
for (i in 1:length(dataframe)){
hist(dataframe[[i]],
main = paste0("Histogram of ", colnames(dataframe[i])),
xlab = paste0(colnames(dataframe[i])))
}
}
## column 1 is the response, and the rest are predictors
neuromaps_siips = read.csv("/Users/kevinnguyen/Desktop/fmph221/data/neuromaps-mni152_y-cpdm_res-basc444.csv")
neuromaps_siips <- apply(neuromaps_siips, 2, scale_zero_to_one) |> as.data.frame()
# creating histograms for each variable (response and predictor)
par(mfrow=c(3,3))
plot_histogram(neuromaps_siips)
# log transforming variables who have visibly skewed data
cols_to_transform = c(
"aghourian2017",
"bedard2019",
"gallezot2017",
"jaworska2020",
"sandiego2015",
"sasaki2012",
"tuominen")
for (i in cols_to_transform){
neuromaps_siips[i] = log(neuromaps_siips[i] + 1)
}
plot_histogram(neuromaps_siips)
# rule out variables who have little to no relationships with the response variable
corr_with_resp = cor(neuromaps_siips[, -1], neuromaps_siips$cpdm)
rel_w_resp = colnames(neuromaps_siips[, -1])[abs(corr_with_resp) > 0.1]
have_rel = neuromaps_siips[, c("cpdm", no_rel_w_resp)]
paste0("dropped ", ncol(neuromaps_siips) - ncol(have_rel), " columns")
plot_histogram(have_rel)
# initial model
m1 = lm(cpdm ~ ., data = have_rel)
round(summary(m1)$coefficients, digits = 3)
summary(m1)$r.squared
# pairwise with smallest p-values
p_values = summary(m1)$coefficients[, 4]
largest_p_values = p_values[order(abs(p_values), decreasing = TRUE)][2:5] |> names()
pairs(have_rel[c("siips", largest_p_values)], pch = 20)
# function to create histograms for each column in a dataframe
plot_histogram = function(dataframe){
for (i in 1:length(dataframe)){
hist(dataframe[[i]],
main = paste0("Histogram of ", colnames(dataframe[i])),
xlab = paste0(colnames(dataframe[i])))
}
}
## column 1 is the response, and the rest are predictors
neuromaps_siips = read.csv("/Users/kevinnguyen/Desktop/fmph221/data/neuromaps-mni152_y-cpdm_res-basc444.csv")
neuromaps_siips <- apply(neuromaps_siips, 2, scale_zero_to_one) |> as.data.frame()
# creating histograms for each variable (response and predictor)
par(mfrow=c(3,3))
plot_histogram(neuromaps_siips)
# log transforming variables who have visibly skewed data
cols_to_transform = c(
"aghourian2017",
"bedard2019",
"gallezot2017",
"jaworska2020",
"sandiego2015",
"sasaki2012",
"tuominen")
for (i in cols_to_transform){
neuromaps_siips[i] = log(neuromaps_siips[i] + 1)
}
plot_histogram(neuromaps_siips)
# rule out variables who have little to no relationships with the response variable
corr_with_resp = cor(neuromaps_siips[, -1], neuromaps_siips$cpdm)
rel_w_resp = colnames(neuromaps_siips[, -1])[abs(corr_with_resp) > 0.1]
have_rel = neuromaps_siips[, c("cpdm", no_rel_w_resp)]
paste0("dropped ", ncol(neuromaps_siips) - ncol(have_rel), " columns")
plot_histogram(have_rel)
# initial model
m1 = lm(cpdm ~ ., data = have_rel)
round(summary(m1)$coefficients, digits = 3)
summary(m1)$r.squared
# pairwise with smallest p-values
p_values = summary(m1)$coefficients[, 4]
largest_p_values = p_values[order(abs(p_values), decreasing = TRUE)][2:5] |> names()
pairs(have_rel[c("cpdm", largest_p_values)], pch = 20)
# residual plot: shows data not iid
plot(m1)
# since there are many variables, we will be using principal components
## transforming the data to set all of the variables to the same units
scaled_siips = scale(neuromaps_siips)
siips_pc = prcomp(scaled_siips)
siips_pc
summary(siips_pc)
### we pick all of the principal components with proportion of variance >= 0.05
## we identify PC4 as the cutoff point
zed = as.matrix(neuromaps_siips) %*% siips_pc$rotation[,1:4]
# pairs plots of principal components
pairs(zed)
m2 = lm(neuromaps_siips$cpdm ~ zed)
summary(m2)
plot(m2)
# functions
scale_zero_to_one <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
plot_hist_by_col <- function(df) {
for (i in seq_len(ncol(df))) {
hist(df[, i], main = colnames(df[i]), xlab = colnames(df[i]))
}
}
# column 1 is the response (y), and the rest are predictors (Xs)
df <- read.csv("/Users/kevinnguyen/Desktop/fmph221/data/neuromaps-mni152_y-cpdm_res-basc444.csv")
df <- apply(df, 2, scale_zero_to_one) |> as.data.frame()
# log transformation of skewed variables
logcols <- c( # choosen by visual inspection of histograms
"aghourian2017",
"bedard2019",
"gallezot2017",
"jaworska2020",
"sandiego2015",
"sasaki2012",
"tuominen"
)
df[logcols] <- log(df[logcols] + 1)
# select predictors that have some marginal relationship with the response
cor_w_y <- cor(df[, -1], df$cpdm)
subset <- colnames(df[, -1])[abs(cor_w_y) > 0.1]
df_subset <- df[, c("cpdm", subset)]
print(paste0("dropped ", ncol(df) - ncol(df_subset), " columns"))
# histogram for each column of subset
plot_hist_by_col(df_subset)
### model 1 ###
m1 <- lm(cpdm ~ ., data = df_subset)
summary(m1)$coefficients |> round(3)
summary(m1)$r.squared
# pairwise plots for predictors with largest t-statistics
tvals <- summary(m1)$coefficients[, 3]
largest_tvals <- tvals[order(abs(tvals), decreasing = TRUE)][2:5] |> names()
pairs(df_subset[c("cpdm", largest_tvals)], pch = 20)
# residual plot: shows data not iid
plot(m1)
### model 2: PCA to reduce collinearity btw predictors ###
df_subset_pc <- prcomp(df_subset[, -1])
summary(df_subset_pc)
# select PCs with proportion of variance >= 0.05
xs <- as.matrix(df_subset[, -1]) %*% df_subset_pc$rotation[, 1:4]
pairs(data.frame(cpdm = df_subset$cpdm, xs), pch = 20)
m2 <- lm(df$cpdm ~ xs)
summary(m2)$coefficients |> round(3)
summary(m2)$r.squared
plot(m2)
# function to create histograms for each column in a dataframe
plot_histogram = function(dataframe){
for (i in 1:length(dataframe)){
hist(dataframe[[i]],
main = paste0("Histogram of ", colnames(dataframe[i])),
xlab = paste0(colnames(dataframe[i])))
}
}
## column 1 is the response, and the rest are predictors
neuromaps_siips = read.csv("/Users/kevinnguyen/Desktop/fmph221/data/neuromaps-mni152_y-cpdm_res-basc444.csv")
neuromaps_siips <- apply(neuromaps_siips, 2, scale_zero_to_one) |> as.data.frame()
# creating histograms for each variable (response and predictor)
par(mfrow=c(3,3))
plot_histogram(neuromaps_siips)
# log transforming variables who have visibly skewed data
cols_to_transform = c(
"aghourian2017",
"bedard2019",
"gallezot2017",
"jaworska2020",
"sandiego2015",
"sasaki2012",
"tuominen")
for (i in cols_to_transform){
neuromaps_siips[i] = log(neuromaps_siips[i] + 1)
}
plot_histogram(neuromaps_siips)
# rule out variables who have little to no relationships with the response variable
corr_with_resp = cor(neuromaps_siips[, -1], neuromaps_siips$cpdm)
rel_w_resp = colnames(neuromaps_siips[, -1])[abs(corr_with_resp) > 0.1]
have_rel = neuromaps_siips[, c("cpdm", no_rel_w_resp)]
paste0("dropped ", ncol(neuromaps_siips) - ncol(have_rel), " columns")
plot_histogram(have_rel)
# initial model
m1 = lm(cpdm ~ ., data = have_rel)
round(summary(m1)$coefficients, digits = 3)
summary(m1)$r.squared
# pairwise with smallest p-values
p_values = summary(m1)$coefficients[, 4]
largest_p_values = p_values[order(abs(p_values), decreasing = TRUE)][2:5] |> names()
pairs(have_rel[c("cpdm", largest_p_values)], pch = 20)
# residual plot: shows data not iid
plot(m1)
# since there are many variables, we will be using principal components
## transforming the data to set all of the variables to the same units
#scaled_siips = scale(neuromaps_siips)
siips_pc = prcomp(neuromaps_siips)
siips_pc
summary(siips_pc)
### we pick all of the principal components with proportion of variance >= 0.05
## we identify PC4 as the cutoff point
zed = as.matrix(neuromaps_siips) %*% siips_pc$rotation[,1:4]
# pairs plots of principal components
pairs(zed)
m2 = lm(neuromaps_siips$cpdm ~ zed)
summary(m2)
plot(m2)
neuromaps_siips = apply(neuromaps_siips, 2, normalize) |> as.data.frame()
normalize = function(x) {
(x - min(x)) / (max(x) - min(x))
}
neuromaps_siips = apply(neuromaps_siips, 2, normalize) |> as.data.frame()
# creating histograms for each variable (response and predictor)
par(mfrow=c(3,3))
plot_histogram(neuromaps_siips)
## column 1 is the response, and the rest are predictors
neuromaps_siips = read.csv("/Users/kevinnguyen/Desktop/fmph221/data/neuromaps-mni152_y-cpdm_res-basc444.csv")
neuromaps_siips <- apply(neuromaps_siips, 2, scale_zero_to_one) |> as.data.frame()
# creating histograms for each variable (response and predictor)
par(mfrow=c(3,3))
plot_histogram(neuromaps_siips)
# log transforming variables who have visibly skewed data
cols_to_transform = c(
"aghourian2017", "alarkurtti2015",
"bedard2019", "dukart2018", "fazio2016",
"gallezot2017", "hesse2017", "hillmer2016",
"jaworska2020", "kaller2017",
"sandiego2015",
"sasaki2012", "smith2017",
"tuominen")
for (i in cols_to_transform){
neuromaps_siips[i] = log(neuromaps_siips[i] + 1)
}
plot_histogram(neuromaps_siips)
## column 1 is the response, and the rest are predictors
neuromaps_siips = read.csv("/Users/kevinnguyen/Desktop/fmph221/data/neuromaps-mni152_y-siips_res-basc444.csv")
View(neuromaps_siips)
pairs(have_rel[c("siips", largest_p_values)], pch = 20)
# function to create histograms for each column in a dataframe
plot_histogram = function(dataframe){
for (i in 1:length(dataframe)){
hist(dataframe[[i]],
main = paste0("Histogram of ", colnames(dataframe[i])),
xlab = paste0(colnames(dataframe[i])))
}
}
# normalize from 0 to 1 because log transformation of negative number or 0 is complex
normalize = function(x) {
(x - min(x)) / (max(x) - min(x))
}
## column 1 is the response, and the rest are predictors
neuromaps_siips = read.csv("/Users/kevinnguyen/Desktop/fmph221/data/neuromaps-mni152_y-siips_res-basc444.csv")
neuromaps_siips = apply(neuromaps_siips, 2, normalize) |> as.data.frame()
# creating histograms for each variable (response and predictor)
par(mfrow=c(3,3))
plot_histogram(neuromaps_siips)
# log transforming variables who have visibly skewed data
cols_to_transform = c(
"aghourian2017", "alarkurtti2015",
"bedard2019", "dukart2018", "fazio2016",
"gallezot2017", "hesse2017", "hillmer2016",
"jaworska2020", "kaller2017",
"sandiego2015",
"sasaki2012", "smith2017",
"tuominen")
for (i in cols_to_transform){
neuromaps_siips[i] = log(neuromaps_siips[i] + 1)
}
# rule out variables who have little to no relationships with the response variable
corr_with_resp = cor(neuromaps_siips[, -1], neuromaps_siips$siips)
rel_w_resp = colnames(neuromaps_siips[, -1])[abs(corr_with_resp) > 0.1]
have_rel = neuromaps_siips[, c("siips", no_rel_w_resp)]
paste0("dropped ", ncol(neuromaps_siips) - ncol(have_rel), " columns")
plot_histogram(have_rel)
# initial model
m1 = lm(siips ~ ., data = have_rel)
round(summary(m1)$coefficients, digits = 3)
summary(m1)$r.squared
# pairwise with smallest p-values
p_values = summary(m1)$coefficients[, 4]
largest_p_values = p_values[order(abs(p_values), decreasing = TRUE)][2:5] |> names()
pairs(have_rel[c("siips", largest_p_values)], pch = 20)
# residual plot: shows data not iid
plot(m1)
# since there are many variables, we will be using principal components
siips_pc = prcomp(have_rel)
siips_pc
summary(siips_pc)
### we pick all of the principal components with proportion of variance >= 0.05
## we identify PC4 as the cutoff point
zed = as.matrix(neuromaps_siips) %*% siips_pc$rotation[,1:4]
pairs(have_rel[c("siips", largest_p_values)], pch = 20)
# functions
scale_zero_to_one <- function(x) {
(x - min(x)) / (max(x) - min(x))
}
plot_hist_by_col <- function(df) {
for (i in seq_len(ncol(df))) {
hist(df[, i], main = colnames(df[i]), xlab = colnames(df[i]))
}
}
# column 1 is the response (y), and the rest are predictors (Xs)
df <- read.csv("/Users/kevinnguyen/Desktop/fmph221/data/neuromaps-mni152_y-cpdm_res-basc444.csv")
df <- apply(df, 2, scale_zero_to_one) |> as.data.frame()
# log transformation of skewed variables
logcols <- c( # choosen by visual inspection of histograms
"aghourian2017",
"bedard2019",
"gallezot2017",
"jaworska2020",
"sandiego2015",
"sasaki2012",
"tuominen"
)
df[logcols] <- log(df[logcols] + 1)
# select predictors that have some marginal relationship with the response
cor_w_y <- cor(df[, -1], df$cpdm)
subset <- colnames(df[, -1])[abs(cor_w_y) > 0.1]
df_subset <- df[, c("cpdm", subset)]
print(paste0("dropped ", ncol(df) - ncol(df_subset), " columns"))
# histogram for each column of subset
plot_hist_by_col(df_subset)
### model 1 ###
m1 <- lm(cpdm ~ ., data = df_subset)
summary(m1)$coefficients |> round(3)
summary(m1)$r.squared
# pairwise plots for predictors with largest t-statistics
tvals <- summary(m1)$coefficients[, 3]
largest_tvals <- tvals[order(abs(tvals), decreasing = TRUE)][2:5] |> names()
pairs(df_subset[c("cpdm", largest_tvals)], pch = 20)
# residual plot: shows data not iid
plot(m1)
### model 2: PCA to reduce collinearity btw predictors ###
df_subset_pc <- prcomp(df_subset[, -1])
summary(df_subset_pc)
# select PCs with proportion of variance >= 0.05
xs <- as.matrix(df_subset[, -1]) %*% df_subset_pc$rotation[, 1:4]
pairs(data.frame(cpdm = df_subset$cpdm, xs), pch = 20)
m2 <- lm(df$cpdm ~ xs)
summary(m2)$coefficients |> round(3)
summary(m2)$r.squared
plot(m2)
pairs(df_subset[c("cpdm", largest_tvals)], pch = 20)
largest_tvals
# residual plot: shows data not iid
plot(m1)
par(mfrow=c(1,1))
# residual plot: shows data not iid
plot(m1)
summary(m1)$coefficients |> round(3)
summary(m1)$r.squared
round(summary(m1)$coefficients, digits = 3)
# initial model
m1 = lm(siips ~ ., data = have_rel)
round(summary(m1)$coefficients, digits = 3)
summary(m1)$r.squared
### model 1 ###
m1 <- lm(cpdm ~ ., data = df_subset)
summary(m1)$coefficients |> round(3)
summary(m1)$r.squared
# residual plot: shows data not iid
plot(m1)
hist(m1$residuals)
par(mfrow=c(1,1))
hist(m1$residuals)
# function to create histograms for each column in a dataframe
plot_histogram = function(dataframe){
for (i in 1:length(dataframe)){
hist(dataframe[[i]],
main = paste0("Histogram of ", colnames(dataframe[i])),
xlab = paste0(colnames(dataframe[i])))
}
}
# normalize from 0 to 1 because log transformation of negative number or 0 is complex
normalize = function(x) {
(x - min(x)) / (max(x) - min(x))
}
## column 1 is the response, and the rest are predictors
neuromaps_siips = read.csv("/Users/kevinnguyen/Desktop/fmph221/data/neuromaps-mni152_y-siips_res-basc444.csv")
neuromaps_siips = apply(neuromaps_siips, 2, normalize) |> as.data.frame()
# creating histograms for each variable (response and predictor)
par(mfrow=c(3,3))
plot_histogram(neuromaps_siips)
# log transforming variables who have visibly skewed data (+1 because log(0) is infinity)
cols_to_transform = c(
"aghourian2017", "alarkurtti2015",
"bedard2019", "dukart2018", "fazio2016",
"gallezot2017", "hesse2017", "hillmer2016",
"jaworska2020", "kaller2017",
"sandiego2015",
"sasaki2012", "smith2017",
"tuominen")
for (i in cols_to_transform){
neuromaps_siips[i] = log(neuromaps_siips[i] + 1)
}
# rule out variables who have little to no relationships with the response variable
corr_with_resp = cor(neuromaps_siips[, -1], neuromaps_siips$siips)
rel_w_resp = colnames(neuromaps_siips[, -1])[abs(corr_with_resp) > 0.1]
have_rel = neuromaps_siips[, c("siips", no_rel_w_resp)]
paste0("dropped ", ncol(neuromaps_siips) - ncol(have_rel), " columns")
plot_histogram(have_rel)
# initial model
m1 = lm(siips ~ ., data = have_rel)
round(summary(m1)$coefficients, digits = 3)
summary(m1)$r.squared
# pairwise with largest coefficients (absolute value)
largest_values = summary(m1)$coefficients[, 1]
largest_coef_abs = largest_values[order(abs(largest_values), decreasing = TRUE)][2:5] |> names()
pairs(have_rel[c("siips", largest_coef_abs)], pch = 20)
> hist(m1$residuals)
hist(m1$residuals)
View(have_rel)
# pairwise with largest coefficients (absolute value)
largest_values = summary(m1)$coefficients[, 1]
largest_coef_abs
# pairwise with largest coefficients (absolute value)
largest_values = summary(m1)$coefficients[, 1]
largest_values
largest_coef_abs = largest_values[order(abs(largest_values), decreasing = TRUE)][2:5] |> names()
largest_coef_abs
# pairwise with largest coefficients (absolute value)
largest_values = summary(m1)$coefficients[-1, 1]
largest_values
largest_coef_abs = largest_values[order(abs(largest_values), decreasing = TRUE)][2:5] |> names()
pairs(have_rel[c("siips", largest_coef_abs)], pch = 20)
> par(mfrow=c(1,1))
par(mfrow=c(1,1))
plot(m2)
hist(m1$residuals)
# function to create histograms for each column in a dataframe
plot_histogram = function(dataframe){
for (i in 1:length(dataframe)){
hist(dataframe[[i]],
main = paste0("Histogram of ", colnames(dataframe[i])),
xlab = paste0(colnames(dataframe[i])))
}
}
# normalize from 0 to 1 because log transformation of negative number or 0 is complex
normalize = function(x) {
(x - min(x)) / (max(x) - min(x))
}
## column 1 is the response, and the rest are predictors
neuromaps_siips = read.csv("/Users/kevinnguyen/Desktop/fmph221/data/neuromaps-mni152_y-siips_res-basc444.csv")
neuromaps_siips = apply(neuromaps_siips, 2, normalize) |> as.data.frame()
# creating histograms for each variable (response and predictor)
plot_histogram(neuromaps_siips)
